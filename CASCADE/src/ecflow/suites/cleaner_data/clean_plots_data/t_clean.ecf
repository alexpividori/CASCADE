%manual
%include <man/t_clean.man>                              # Specific manual for this task
%end

%include <head_4_bash.h>                                # Include header common to all tasks. 
                                                        # It manages general calls to ecflow client


%include <etc/t_clean.ini>

#-----------------------------------------------------------------------------
#                        MAIN SCRIPT HERE BELOW
#-----------------------------------------------------------------------------
echo "The bash version is:$BASH_VERSION"
    echo -e "\n\n\t\tCLEAN FILES AND DIRECTORIES AS DEFINED IN THE INITIALIZATION FILE\n"
    EXIT_STATUS=0   # set default exit status everything OK

# Move in the working directory
#
   WORK_DIR="${DATA_CLN_ROOT_DIR:=NULL}"
   if [[ ! -d ${WORK_DIR:=NULL} ]];then mkdir -p ${WORK_DIR} ; fi
   cd ${WORK_DIR}
   echo -e "\n\tI am currently working in the directory: $(pwd)"
#
#
    #
    #  +-----------------------------------------------------------------+
    #  |    Load parameters useful for the whole node                    |
    #  +-----------------------------------------------------------------+
    #
    CLEAN_HOME=${DATA_CLN_ROOT_DIR:-"./"}    # The root directory where to start the removal 
    declare -a BKA                           # This is the array with removal tasks
    N=0; while [[ $N -lt ${#DATA_CLN_ACT[@]} ]]; do BKA[$N]="${DATA_CLN_ACT[$N]}" ;N=$(($N+1));done
    #
    #  +-----------------------------------------------------------------+
    #  |    Set run date and run hour                                    |
    #  +-----------------------------------------------------------------+
    #
    if [[ -z $DATA_CLN_DATE ]];then DATA_CLN_DATE="%ECF_DATE%"; fi    # Set run date as today if it is not set in the initialization file 
    echo -e "\n\tRun date is set to: $DATA_CLN_DATE  (ecFlow environmental date is: %ECF_DATE%)\n"   
    if [[ -z $DATA_CLN_HOUR ]];then DATA_CLN_HOUR="%ECF_TIME%"; fi    # Set run hour as suite time if not set in the initialization file 
    echo -e "\tRun hour is set to: $DATA_CLN_HOUR  (ecFlow environmental date is: %ECF_TIME%)\n"   
    #
    #  +-----------------------------------------------------------------+
    #  |     Create the temporary directory for removal supplementals    |
    #  +-----------------------------------------------------------------+
    #
    CLEAN_TMP_DIR="${CLEAN_HOME}/$(mktemp -u backup_dir.XXXXX)"    # Temporary directory for supplemental files generationon 
    if [[ ! -d $CLEAN_TMP_DIR  ]];then mkdir -p $CLEAN_TMP_DIR;fi  # Create temporary directory for file genration 
    echo -e "\tCreated temporary directory: $CLEAN_TMP_DIR"
    cd $CLEAN_TMP_DIR
    echo -e "\tCurrently I am in the temporary directory: $(pwd)"
    
    #
    #
    #  +-----------------------------------------------------------------+
    #  |                                                                 |
    #  |                 Loop over the removal tasks                     |
    #  |                                                                 |
    #  +-----------------------------------------------------------------+
    #
    #
    DT_START=$(date -u +%%s)                                   # Get start time in seconds from epoch
    echo -e "\n\tSTART Removal activity at: $(date -u +%%F' '%%T) UTC\n"
    N=0 
    while [[ $N -lt ${#BKA[@]} ]];do 
          echo -e "\n\t+--------------------------------+"
          echo -e "\t|\t  Removal task: $N\t |"
          echo -e "\t+--------------------------------+\n"
          echo -e "\n\t  ==> ${BKA[$N]}"
          #
          #  +---------------------------------------------------------+
          #  |     Get arguments to requirted to perform removal       |
          #  +---------------------------------------------------------+
          #
          A="$(echo ${BKA[$N]} | cut -d ";" -f  1)";A=${A:-n}    # Forced removal (default not force)      
          B="$(echo ${BKA[$N]} | cut -d ";" -f  2)";B=${B:-n}    # Recoursive removal (default is do not recoursive removal)  
          C="$(echo ${BKA[$N]} | cut -d ";" -f  3)";C=${C:-0}    # Minimum age of the filesa (default is 0 minutes)
          D="$(echo ${BKA[$N]} | cut -d ";" -f  4)";D=${D:-0}    # Minimum size of the files (default is 0 bytes) 
          R="$(echo ${BKA[$N]} | cut -d ";" -f  5)";R=${R:-NULL} # Root directory where to start the search of files to be removed 
          F="$(echo ${BKA[$N]} | cut -d ";" -f  6)";F=${F:-NULL} # File[s] to be removed 
          X="$(echo ${BKA[$N]} | cut -d ";" -f  7)";X=${X:-NULL} # File[s] to be exluded from removal 
          

          echo -e "\n\tDetails of this task are: \
          \n\tA= Force removal                                        -----> $A \
          \n\tB= Recoursive removal                                   -----> $B \
          \n\tC= Minimum age of the files to be removed [min]         -----> $C \
          \n\tD= Minimum size of the files to be removed [bytes]      -----> $D \
          \n\tR= Root directory where to start the search of files    -----> $R \
          \n\tF= File[s] to be removed                                -----> $F \
          \n\tX= File[s] to be exluded from removal                   -----> $X \n"

          #
          #  +---------------------------------------------------------+
          #  |     Generate information suitable for removals          |
          #  +---------------------------------------------------------+
          #
          echo -e "\n\tStart file removal\n"
          FULL_LIST_FILE=$(mktemp -u full_list.XXXXX);  touch $FULL_LIST_FILE
          EXLU_LIST_FILE=$(mktemp -u exlu_list.XXXXX);  touch $EXLU_LIST_FILE
          TRUE_LIST_FILE=$(mktemp -u true_list.XXXXX);  touch $TRUE_LIST_FILE
          GZIP_LIST_FILE=$(mktemp -u gzip_list.XXXXX);  touch $GZIP_LIST_FILE
          #
          # Create the file list to be considered for the transfer
          #
          FLAG_TO_GO=0
          echo -e "\n\tCOMMAND: find  ${R}  -name "${F}" -mmin +${C} \! -size -${D}c  > $FULL_LIST_FILE"
          find  ${R}  -name "${F}" -mmin +${C} \! -size -${D}c  > $FULL_LIST_FILE ||  FLAG_TO_GO=1
          if [[ $FLAG_TO_GO -eq 1 ]]; then 
             echo -e "\tSome problems occurred during file selection; please check paths"
             echo -e "\tor look at FULL_LIST_FILE=$(pwd)/${FULL_LIST_FILE}"
          else
             NFILES=$(cat ${FULL_LIST_FILE} | wc -l)
             echo -e "\tFile selection done.\n\tList available in file: $(pwd)/${FULL_LIST_FILE}"
             echo -e "\tNumber of selected files: ${NFILES}\n"
          fi
          #
          # Create the file list to be exluded in the transfer
          #
          if [[ "${X}" != "NULL" ]];then  
             FLAG_TO_GO=0
             echo -e "\n\tCOMMAND: find  ${R}  -name "${X}"   > $EXLU_LIST_FILE"
             find  ${R}  -name "${X}"   > $EXLU_LIST_FILE ||  FLAG_TO_GO=1
             if [[ $FLAG_TO_GO -eq 1 ]]; then 
                echo -e "\tSome problems occurred during selection of files to be exluded; please check paths"
                echo -e "\tor look at EXLU_LIST_FILE=$(pwd)/${EXLU_LIST_FILE}"
             else
                NFILES=$(cat ${EXLU_LIST_FILE} | wc -l)
                echo -e "\tFile selection done.\n\tList available in file: $(pwd)/${EXLU_LIST_FILE}"
                echo -e "\tNumber of exluded files: ${NFILES}\n"
             fi
          else
             echo -e "\tNo selection for file to be exluded.\n"
          fi
          #
          # Create the file list with the files to be transferred only 
          #
          FLAG_TO_GO=0
          grep -v -f $EXLU_LIST_FILE $FULL_LIST_FILE > $TRUE_LIST_FILE ||  FLAG_TO_GO=1
          if [[ $FLAG_TO_GO -eq 1 ]]; then 
             echo -e "\tSome problems occurred during files list intesection please check. "
             echo -e "\tI tried: grep -v -f $EXLU_LIST_FILE $FULL_LIST_FILE > $TRUE_LIST_FILE"
             NFILES=0
          else
             echo -e "\n\tFile lists intersection successfully done."
             echo -e "\tList available in file: $(pwd)/${TRUE_LIST_FILE}"
             NFILES=$(cat ${TRUE_LIST_FILE} | wc -l)
             echo -e "\tNumber of files to be removed are: ${NFILES}\n"
          fi
          #
          # Remove files                                                   
          #
          if [[ $NFILES -gt 0 ]] && [[ $FLAG_TO_GO -eq 0 ]];then
             if [[ "${A}" == "y" ]];then FORCE="f";echo -e "\n\tForcing removal activated!!!!!!\n"; else FORCE=" "; fi
             echo -e "\tRemoval ready to start. GO.\n"
             NF=0; NFR=$NF
             while read FC; do 
                   NF=$(($NF+1))
                   echo -e "\n\tProcessing removal: $NF"
                   if [[ -e $FC  ]];then 
                      SUMMARY=$(stat -c "%%n;%%F;%%A;%%s;%%y" $FC)
                      #   
                      # It is a directory   
                      #   
                      if [[ -d $FC  ]];then 
                         echo -en "\tDirectory: $FC "
                         FC_SIZE=$(du -bs $FC)  || echo -en " Error in getting full size "  
                         FC_SIZE=$(echo $FC_SIZE |  cut -d " " -f 1)
                         SUMMARY=$(stat -c "%%n;%%F;%%A;${FC_SIZE:-0};%%y" $FC) 
                         echo -e "\n\tFile name; File type; Access rights; Total size [bytes]; Time of last modification"
                         echo $SUMMARY | sed s/^/\\t/g | tee -a ${GZIP_LIST_FILE} 
                         if [[ "${B}" == "y" ]];then 
                            echo -e "\n\tRecursive is activated [NOT allowed with forced] just rm -vR ..."
                            FLAG_TO_RM=0
                            rm -vR $FC > /dev/null 2>&1 || FLAG_TO_RM=1
                            if [[ $FLAG_TO_RM -eq 0 ]];then 
                               echo -en "\tremoved.\n";NFR=$(($NFR+1))
                               echo $SUMMARY >> ${GZIP_LIST_FILE}.tmp
                            else 
                               echo -en "\n\tNOT removed.\n "
                            fi
                         else 
                            FLAG_TO_RM=0
                            rmdir $FC  > /dev/null 2>&1 || FLAG_TO_RM=1 
                            if [[ $FLAG_TO_RM -eq 0 ]];then 
                               echo -en " empty, removed.\n";NFR=$(($NFR+1))
                               echo $SUMMARY >> ${GZIP_LIST_FILE}.tmp
                            else 
                               echo -en "\n\tNOT empty, NOT removed.\n "
                            fi
                         fi
                      else
                      #   
                      # It is a regular file 
                      #   
                         echo -e "\tFile name; File type; Access rights; Total size [bytes]; Time of last modification"
                         echo $SUMMARY | sed s/^/\\t/g | tee -a ${GZIP_LIST_FILE} 
                         echo -en "\tFile: $FC\n\tI remove it; it is a file ....."
                         FILE_A_RIGHTS=$(stat -c %%a ${FC})
                         echo -en " Access rights are: ${FILE_A_RIGHTS} ..."
                         FLAG_TO_RM=0
                         if [[ ${FILE_A_RIGHTS:0:1} -eq 6 ]];then  
                            rm -v ${FC} > /dev/null 2>&1 || FLAG_TO_RM=1 
                         else 
                            if  [[ "${A}" == "y" ]];then rm -v${FORCE} ${FC} > /dev/null 2>&1 || FLAG_TO_RM=1; else FLAG_TO_RM=1 ;fi
                         fi
                         if [[ $FLAG_TO_RM -eq 0 ]];then 
                            echo -en " removed.\n";NFR=$(($NFR+1))
                            echo $SUMMARY >> ${GZIP_LIST_FILE}.tmp   
                         else 
                            echo -en " NOT removed.\n "
                         fi
                      fi
                   else
                       echo -e "\tFile: $FC NOT available"
                   fi 
             done < ${TRUE_LIST_FILE}

             echo -e "\n\n\t========================================================="
             echo -e "\n\tRemoved files: $NFR - expected to be removed: $NF"

             TOT_SIZ_TOBEREMOVED=0
             while read LINEA;do
                  SIZ_REMOVED=$(echo $LINEA | cut -d ";" -f 4) || SIZ_REMOVED=0
                  TOT_SIZ_TOBEREMOVED="$(echo "scale=3; $TOT_SIZ_TOBEREMOVED + ${SIZ_REMOVED}/1000." | bc -l)"|| echo -e "\n\tError in computing total removed volume"
             done  < $GZIP_LIST_FILE 
             TOT_SIZ_REMOVED=0
             if [[ -e $GZIP_LIST_FILE.tmp ]]; then 
                while read LINEA;do
                      SIZ_REMOVED=$(echo $LINEA | cut -d ";" -f 4) || SIZ_REMOVED=0
                       TOT_SIZ_REMOVED="$(echo "scale=3; $TOT_SIZ_REMOVED + ${SIZ_REMOVED}/1000." | bc -l)"|| echo -e "\n\tError in computing total removed volume"
                done  < $GZIP_LIST_FILE.tmp 
             fi
             echo -e "\n\tTotal expected removed volume is: $TOT_SIZ_TOBEREMOVED kB"
             echo -e "\tTotal removed volume is: $TOT_SIZ_REMOVED kB\n"
             echo -e "\t=========================================================\n"


          else
             echo -e "\n\n\tWARNING!!!!! No files to be removed.\n"
          fi
          N=$(($N+1))
    done
    #
    #  +-----------------------------------------------------------------+
    #  |                   Remove the temporary directory                |
    #  +-----------------------------------------------------------------+
    #
    echo -e "\n\n\tSTOP Removal activity at: $(date -u +%%F' '%%T) UTC\n"
    DT_STOP=$(date -u +%%s)                                   # Get end time in seconds from epoch
    echo -e "\tRemoval activity completed in: $(($DT_STOP - $DT_START)) seconds\n\n"
    if [[ -d $CLEAN_TMP_DIR  ]];then rm -Rv $CLEAN_TMP_DIR | sed -e s/^/\\t/g ;fi  # Remove temporary directory
  
    EXIT_STATUS=$?
    echo -e "\n\tExecution completed with EXIT_STATUS=${EXIT_STATUS}\n\n"

%include <tail_4_bash.h>               # Include tail common to all tasks. 
                                       # It manages general calls to ecflow client
